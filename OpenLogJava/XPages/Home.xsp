<?xml version="1.0" encoding="UTF-8"?>
<xp:view xmlns:xp="http://www.ibm.com/xsp/core" xmlns:xc="http://www.ibm.com/xsp/custom">

	<!--
		Copyright 2013 Paul Withers
		Licensed under the Apache License, Version 2.0 (the "License");
		you may not use this file except in compliance with the License.
		You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

		Unless required by applicable law or agreed to in writing,
		software distributed under the License is distributed on an "AS IS" BASIS,
		WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		See the License for the specific language governing permissions and limitations under the License
	-->


	<xc:ccLayoutOneUI selected="home">
		<xp:this.facets>
			<xp:div xp:key="facet_1" style="text-align:center" id="panel1">
				<!-- Images -->
				<xp:image url="intec-logo-medium1.gif" id="image1"
					style="float:right" alt="Intec Systems Ltd">
				</xp:image>
				<xp:div styleClass="lotusInfoBox" style="clear:right;text-align:left;">
					<xp:text escape="false">
						<xp:this.value><![CDATA[XPages OpenLog Logger makes <b>OpenLog</b> easier and more flexible than ever before to use in XPages.<br/><br/>
						<div>
						<ul>
						<li>It is Apache licensed</li>
						<li>It can be used in your managed beans and other Java classes, as it has ever since XPages Help Application.</li>
						<li>It can be used directly from SSJS with as little as <i>openLogBean.addError(e,this);</i>.</li>
						<li>From SSJS all caught errors on the page are logged out together, at the end of the request.</li>
						<li>Only two method names are used from SSJS, one to add an error, one to add an event,
						making it easy to pick up</li>
						<li>From SSJS you only need to pass the information you wish. There is no need to pass nulls or empty strings.</li>
						<li>From SSJS only one unique error per component is logged, regardless of how many times
						the error is encountered during the refresh lifecycle. That is not available from any other
						current logging mechanism.</li>
						<li>In SSJS, if you use a custom error page, uncaught errors will also be logged.</li>
						<li>Uncaught errors will be logged for the page the error occurs on, not your custom error page.</li>
						<li>This database includes full documentation of how to log errors.</li>
						<li>You can define the OpenLog path and backup debug level (in case of problems
						creating an OpenLog document) without needing to change the code.</li>
						<li>Those variables can be defined in xsp.properties on the NSF or the server.
						You can also define a backup in the notes.ini. If nothing is set defaults are used.</li>
						<li>The functionality and code are available as an OSGi plugin (the best practice approach) 
						but can also be included in individual NSFs.</li>
						<li>If you are using OpenNTF Domino API, all the functionality is already included in that product. 
						Instead of OpenLogUtil, use XspOpenLogUtil. Instead of OpenLogUtil.getOpenLogItem(), 
						use XspOpenLogUtil.getXspOpenLogItem(). All other method names are unchanged.</li>
						</ul></div><br/>

						Configuration settings can be set in the xsp.properties of the
						database or server or in the server's notes.ini. They are retrieved in that order.
						<ul><li>Set the OpenLog path by using <b>xsp.openlog.filepath</b>, defaulting to "OpenLog.nsf"</li>
						<li>Set debug level if errors occur in OpenLogItem class using <b>xsp.openlog.debugLevel</b>. The 
						default is 2, to log just full details. 1 will log just the message, 0 will log nothing.
						<li>By default SSJS errors will also be added to a FacesMessage, so displayed if a partial 
						refresh occurs. The error also includes the control id the error relates to, if an id has
						been defined (best practice). To suppress this set <b>xsp.openlog.displayError=false</b></li>
						<li>xsp.openlog.genericErrorMessage can be used to define a generic error message to 
						be displayed to the users e.g. "Please contact IT, an error has occurred". If 
						<b>xsp.openlog.genericErrorMessage</b> returns an empty string, the default, then the full error 
						is returned</li>
						<li><b>xsp.openlog.email</b> can be used to send logs to an OpenLog database that is set up as a 
						mail-in database. The log document is created in the server's mail.box and saved with the 
						email address as the recipient.</li>
						<li><b>xsp.openlog.suppressEventStack</b> can be used to suppress stack traces in Event logs.
						Full stack traces are still recorded for errors. <b>NOTE</b>The stack trace is the only method 
						I know of to identify which XPages lifecycle phase an Event / Error is logged for, e.g. you may 
						get a message logged for Restore View phase because a variable is not available, but the page displays 
						fine because the relevant variable is available in Render Response.</li>
						<li><b>xsp.openlog.expireDate</b> can be used to set the ExpireDate field used by auto-archiving. 
						This should be a number of days, e.g. 30, to auto-expire the log at 30 days from the date logged.</li>
						<li><b>xsp.openlog.includeQueryString</b> can be used to include any query string values (e.g. ?open&login) 
						in the "Agent" field in the OpenLog log.</li>
						<li><b>xsp.openlog.suppressEventControl</b> can be used to suppress the ID of the control triggering 
						an Event when logging from SSJS.</li>
						<li><b>xsp.openlog.templateFilepath</b> can be used to define a template filepath. If no database exists 
						at the OpenLog path, a new database will be created based on the template.</li></ul>
						<br/>

						See this database's xsp.properties for samples.

						See <b>Using from Java</b> for full documentation on accessing it in Java code.<br/><br/>

						See <b>Using from SSJS</b> for full documentation of how to use it from SSJS.<br/><br/>

						The <b>Examples</b> area provides some examples you can look at. "Error On Load" and "Two Errors"
						will re-route to the error page.<br/><br/>

						One important note on XPages custom error pages. <b>Never use XPages events on an error page.</b>
						For example, a Section control on an XPage adds events to expand / collapse the section.
						The section will work as normal if the error page is triggered from a full refresh. But if the error
						page is triggered from a partial refresh, the XSP Command Manager only prints HTML to the browser,
						it doesn't attach events. So your section will not work. <b>Error</b> is the custom error page in
						this application and gives an example of an XPage with only standard HTML.]]>
						</xp:this.value>
					</xp:text>
				</xp:div>
			</xp:div>
		</xp:this.facets>
	</xc:ccLayoutOneUI>
</xp:view>
